login as: admuser
admuser@10.5.20.29's password:
Welcome to Ubuntu 22.04.5 LTS (GNU/Linux 5.15.0-157-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

 System information as of Sat Oct  4 01:39:50 PM CEST 2025

  System load:  0.0                Processes:              300
  Usage of /:   13.1% of 96.37GB   Users logged in:        1
  Memory usage: 17%                IPv4 address for ens33: 10.5.20.29
  Swap usage:   0%

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar for easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

1 additional security update can be applied with ESM Apps.
Learn more about enabling ESM Apps service at https://ubuntu.com/esm

New release '24.04.3 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


Last login: Fri Oct  3 23:16:17 2025
admuser@admuser:~$ sudo -i
[sudo] password for admuser:
root@admuser:~# pm2 startup
pm2 save
[PM2] Init System found: systemd
Platform systemd
Template
[Unit]
Description=PM2 process manager
Documentation=https://pm2.keymetrics.io/
After=network.target

[Service]
Type=forking
User=root
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
Environment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin
Environment=PM2_HOME=/root/.pm2
PIDFile=/root/.pm2/pm2.pid
Restart=on-failure

ExecStart=/usr/lib/node_modules/pm2/bin/pm2 resurrect
ExecReload=/usr/lib/node_modules/pm2/bin/pm2 reload all
ExecStop=/usr/lib/node_modules/pm2/bin/pm2 kill

[Install]
WantedBy=multi-user.target

Target path
/etc/systemd/system/pm2-root.service
Command list
[ 'systemctl enable pm2-root' ]
[PM2] Writing init configuration in /etc/systemd/system/pm2-root.service
[PM2] Making script booting at startup...
[PM2] [-] Executing: systemctl enable pm2-root...
[PM2] [v] Command successfully executed.
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
$ pm2 save

[PM2] Remove init script via:
$ pm2 unstartup systemd
[PM2] Saving current process list...
[PM2] Successfully saved in /root/.pm2/dump.pm2
root@admuser:~#
root@admuser:~#
root@admuser:~#
root@admuser:~# cd /opt/ceshtje-ligjore
mkdir -p uploads/documents
chmod 755 uploads
chmod 755 uploads/documents
root@admuser:/opt/ceshtje-ligjore# cat > server/localFileStorage.ts << 'EOF'
import { Response } from "express";
import { randomUUID } from "crypto";
import fs from "fs/promises";
import path from "path";
import { createReadStream } from "fs";

const UPLOADS_DIR = path.join(process.cwd(), 'uploads');
const DOCUMENTS_DIR = path.join(UPLOADS_DIR, 'documents');

export class ObjectNotFoundError extends Error {
  constructor() {
    super("Object not found");
    this.name = "ObjectNotFoundError";
    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);
  }
}

export class LocalFileStorageService {
  constructor() {
    this.ensureDirectories();
  }

  private async ensureDirectories() {
    try {
      await fs.mkdir(UPLOADS_DIR, { recursive: true });
      await fs.mkdir(DOCUMENTS_DIR, { recursive: true });
    } catch (error) {
      console.error('Error creating upload directories:', error);
    }
  }

  async downloadObject(filePath: string, res: Response) {
    try {
      const fullPath = path.join(DOCUMENTS_DIR, path.basename(filePath));

      const stats = await fs.stat(fullPath);
      const ext = path.extname(filePath).toLowerCase();
      let contentType = 'application/octet-stream';

      if (ext === '.pdf') contentType = 'application/pdf';
      else if (ext === '.doc') contentType = 'application/msword';
      else if (ext === '.docx') contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';

      res.set({
        "Content-Type": contentType,
        "Content-Length": stats.size,
        "Cache-Control": `private, max-age=3600`,
        "Content-Disposition": `attachment; filename="${path.basename(filePath)}"`,
      });

      const stream = createReadStream(fullPath);
      stream.on("error", (err) => {
        console.error("Stream error:", err);
        if (!res.headersSent) {
          res.status(500).json({ error: "Error streaming file" });
        }
      });

      stream.pipe(res);
    } catch (error) {
      console.error("Error downloading file:", error);
EOF return '/albpetrol-legal/uploads';g): string {Name);ing> {;';
root@admuser:/opt/ceshtje-ligjore# cat > server/localFileStorage.ts << 'EOF'
import { Response } from "express"; hmod 755 uploads/documents
                                    at > server/localFileStorage.ts << 'EOF'
import { Response } from "express";
                                   cat > server/localFileStorage.ts << 'EOF'
import { Response } from "express"; hmod 755 uploads/documents
                                    at > server/localFileStorage.ts << 'EOF'
import { Response } from "express";
import { randomUUID } from "crypto";
import fs from "fs/promises";
import path from "path";
import { createReadStream } from "fs";

const UPLOADS_DIR = path.join(process.cwd(), 'uploads');
const DOCUMENTS_DIR = path.join(UPLOADS_DIR, 'documents');

export class ObjectNotFoundError extends Error {
  constructor() {
    super("Object not found");
    this.name = "ObjectNotFoundError";
    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);
  }
}

export class LocalFileStorageService {
  constructor() {
    this.ensureDirectories();
  }

  private async ensureDirectories() {
    try {
      await fs.mkdir(UPLOADS_DIR, { recursive: true });
      await fs.mkdir(DOCUMENTS_DIR, { recursive: true });
    } catch (error) {
      console.error('Error creating upload directories:', error);
    }
  }

  async downloadObject(filePath: string, res: Response) {
    try {
      const fullPath = path.join(DOCUMENTS_DIR, path.basename(filePath));

      const stats = await fs.stat(fullPath);
      const ext = path.extname(filePath).toLowerCase();
      let contentType = 'application/octet-stream';

      if (ext === '.pdf') contentType = 'application/pdf';
      else if (ext === '.doc') contentType = 'application/msword';
      else if (ext === '.docx') contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';

      res.set({
        "Content-Type": contentType,
        "Content-Length": stats.size,
        "Cache-Control": `private, max-age=3600`,
        "Content-Disposition": `attachment; filename="${path.basename(filePath)}"`,
      });

      const stream = createReadStream(fullPath);
      stream.on("error", (err) => {
        console.error("Stream error:", err);
        if (!res.headersSent) {
          res.status(500).json({ error: "Error streaming file" });
        }
      });

      stream.pipe(res);
    } catch (error) {
      console.error("Error downloading file:", error);
EOF return '/albpetrol-legal/uploads';g): string {Name);ing> {;';
