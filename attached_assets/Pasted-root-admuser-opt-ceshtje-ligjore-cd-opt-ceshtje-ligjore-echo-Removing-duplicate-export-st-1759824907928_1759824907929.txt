root@admuser:/opt/ceshtje-ligjore# cd /opt/ceshtje-ligjore

echo "=== Removing duplicate export statements ==="

# Show the duplicate lines
echo "Current duplicate exports:"
tail -5 server/storage.ts

# Keep only one export statement at the end
# Remove everything after line 770 (the class closing brace)
sed -i '771,$d' server/storage.ts

# Add the single export statement
echo "" >> server/storage.ts
echo "export const storage = new DatabaseStorage();" >> server/storage.ts

echo "✅ Duplicates removed!"

# Verify the file ends correctly
echo ""
echo "Last 5 lines of storage.ts:"
tail -5 server/storage.ts

# Rebuild
finpm run build 2>&1 | grep ERROR be populated!"bpetrol.al/case-transfer"st/inde
=== Removing duplicate export statements ===
Current duplicate exports:
}

export const storage = new DatabaseStorage();

export const storage = new DatabaseStorage();
✅ Duplicates removed!

Last 5 lines of storage.ts:
    return { count: result.length };
  }
}

export const storage = new DatabaseStorage();


> rest-express@1.0.0 build
> vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist

vite v5.4.20 building for production...
✓ 2411 modules transformed.
../dist/public/index.html                                         1.09 kB │ gzip:   0.63 kB
../dist/public/assets/Albpetrol.svg_1754604323425-C1lBmiZp.png   93.96 kB
../dist/public/assets/index-D1b5zML-.css                        159.05 kB │ gzip:  25.36 kB
../dist/public/assets/index-No3X9pMA.js                         870.74 kB │ gzip: 255.59 kB

(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
✓ built in 3.63s

  dist/index.js  191.0kb

⚡ Done in 7ms

✅ BUILD SUCCESSFUL!

Verifying endpoints exist in build:
  /api/users count: 0
  /api/transfer-cases count: 0

Use --update-env to update environment variables
[PM2] Applying action restartProcessId on app [albpetrol-legal](ids: [ 0 ])
[PM2] [albpetrol-legal](0) ✓
┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐
│ id │ name               │ mode     │ ↺    │ status    │ cpu      │ memory   │
├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤
│ 0  │ albpetrol-legal    │ fork     │ 7    │ online    │ 0%       │ 18.9mb   │
└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘

🎉 SUCCESS! Now refresh https://legal.albpetrol.al/case-transfer
The user dropdowns should be populated!
root@admuser:/opt/ceshtje-ligjore# cd /opt/ceshtje-ligjore

echo "=== Checking where httpServer is created ==="
grep -n "httpServer\|export.*httpServer\|export default" server/routes.ts | tail -10

echo ""
echo "=== Checking where new routes were added ==="
grep -n "'/api/users'\|'/api/transfer-cases'" server/routes.ts

echo ""
echo "The problem: Routes must come BEFORE httpServer creation!"
echo ""
echo "Let's see the end of routes.ts:"
tail -30 server/routes.ts | head -20
=== Checking where httpServer is created ===
1398:  const httpServer = createServer(app);
1411:  return httpServer;

=== Checking where new routes were added ===
1415:  app.get('/api/users', isAuthenticated, isAdmin, async (req, res) => {
1434:  app.post('/api/transfer-cases', isAuthenticated, isAdmin, async (req, res) => {

The problem: Routes must come BEFORE httpServer creation!

Let's see the end of routes.ts:

      if (fromUserId === toUserId) {
        return res.status(400).json({ error: 'Cannot transfer cases to the same user' });
      }

      // Verify both users exist
      const fromUser = await storage.getUserById(fromUserId);
      const toUser = await storage.getUserById(toUserId);

      if (!fromUser) {
        return res.status(404).json({ error: 'Source user not found' });
      }

      if (!toUser) {
        return res.status(404).json({ error: 'Destination user not found' });
      }

      // Transfer all cases
      const result = await storage.transferCases(fromUserId, toUserId);

root@admuser:/opt/ceshtje-ligjore#
