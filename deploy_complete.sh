#!/bin/bash

echo "=================================="
echo "Attachment Window Update"
echo "=================================="

cd /opt/ceshtje-ligjore || exit 1

# Backup
echo "📦 Creating backups..."
mkdir -p backups
cp client/src/components/case-entry-form.tsx backups/case-entry-form.backup.$(date +%s) 2>/dev/null
cp client/src/components/case-edit-form.tsx backups/case-edit-form.backup.$(date +%s) 2>/dev/null

# Write case-entry-form.tsx using base64
echo "📝 Updating case-entry-form.tsx..."
cat > /tmp/entry.b64 << 'B64_ENTRY_END'

B64_ENTRY_END
base64 -d /tmp/entry.b64 > client/src/components/case-entry-form.tsx

# Write case-edit-form.tsx using base64
echo "📝 Updating case-edit-form.tsx..."
cat > /tmp/edit.b64 << 'B64_EDIT_END'

B64_EDIT_END
base64 -d /tmp/edit.b64 > client/src/components/case-edit-form.tsx

# Clean up temp files
rm -f /tmp/entry.b64 /tmp/edit.b64

echo "✅ Files updated successfully"

# Rebuild
echo "🔨 Rebuilding application..."
npm run build

if [ $? -ne 0 ]; then
  echo "❌ Build failed!"
  exit 1
fi

echo "✅ Build completed"

# Restart PM2
echo "🔄 Restarting PM2..."
pm2 delete albpetrol-legal 2>/dev/null || true

NODE_ENV=production \
PORT=5000 \
DATABASE_URL="postgresql://albpetrol_user:SecurePass2025@localhost:5432/albpetrol_legal_db" \
SMTP_HOST="smtp-mail.outlook.com" \
SMTP_PORT=587 \
SMTP_USER="it.system@albpetrol.al" \
SMTP_PASS="Albpetrol2025" \
SMTP_FROM="it.system@albpetrol.al" \
EMAIL_FROM="it.system@albpetrol.al" \
TZ="Europe/Tirane" \
pm2 start dist/index.js --name albpetrol-legal

pm2 save

echo ""
echo "=================================="
echo "✅ Deployment Complete!"
echo "=================================="
echo ""
echo "Changes applied:"
echo "  ✅ Attachment window on LEFT (square)"
echo "  ✅ Files display on RIGHT"
echo ""
echo "Check: https://legal.albpetrol.al"
echo ""
pm2 status
