#!/bin/bash
# Comprehensive penetration test for https://legal.albpetrol.al

TARGET="https://legal.albpetrol.al"
REPORT_FILE="pentest_report_$(date +%Y%m%d_%H%M%S).txt"

echo "ðŸ”’ PENETRATION TEST REPORT FOR $TARGET" | tee $REPORT_FILE
echo "Generated: $(date)" | tee -a $REPORT_FILE
echo "=========================================" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "=== 1. BASIC CONNECTIVITY AND SSL ANALYSIS ===" | tee -a $REPORT_FILE
echo "Testing basic connectivity..." | tee -a $REPORT_FILE

# Basic connectivity test
curl -I -s --connect-timeout 10 $TARGET | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

# SSL/TLS analysis
echo "SSL/TLS Certificate Analysis:" | tee -a $REPORT_FILE
openssl s_client -connect legal.albpetrol.al:443 -servername legal.albpetrol.al < /dev/null 2>/dev/null | openssl x509 -noout -text | grep -E "(Subject:|Issuer:|Not Before:|Not After:|Public Key:|Signature Algorithm)" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "=== 2. HTTP SECURITY HEADERS ANALYSIS ===" | tee -a $REPORT_FILE
echo "Checking security headers..." | tee -a $REPORT_FILE

curl -I -s $TARGET | grep -E "(Strict-Transport-Security|Content-Security-Policy|X-Frame-Options|X-Content-Type-Options|X-XSS-Protection|Referrer-Policy)" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "=== 3. SERVER INFORMATION DISCLOSURE ===" | tee -a $REPORT_FILE
echo "Checking server information leakage..." | tee -a $REPORT_FILE

curl -I -s $TARGET | grep -E "(Server:|X-Powered-By:|X-AspNet-Version:|X-AspNetMvc-Version)" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "=== 4. COMMON VULNERABILITY SCANS ===" | tee -a $REPORT_FILE

# Test for common paths
echo "Testing common sensitive paths:" | tee -a $REPORT_FILE
PATHS=(
    "/admin"
    "/api"
    "/login"
    "/dashboard"
    "/.env"
    "/config"
    "/backup"
    "/robots.txt"
    "/sitemap.xml"
    "/.well-known/security.txt"
    "/package.json"
    "/composer.json"
    "/web.config"
    "/.htaccess"
    "/config.json"
    "/settings.json"
)

for path in "${PATHS[@]}"; do
    response=$(curl -s -o /dev/null -w "%{http_code}" "$TARGET$path")
    echo "$TARGET$path - HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

echo "=== 5. AUTHENTICATION ENDPOINT TESTING ===" | tee -a $REPORT_FILE
echo "Testing authentication endpoints..." | tee -a $REPORT_FILE

# Test login endpoint
LOGIN_RESPONSE=$(curl -s -X POST "$TARGET/api/auth/login" \
    -H "Content-Type: application/json" \
    -d '{"email":"test@test.com","password":"wrongpassword"}' \
    -w "HTTP_CODE:%{http_code}")

echo "Login endpoint test: $LOGIN_RESPONSE" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "=== 6. SQL INJECTION BASIC TESTS ===" | tee -a $REPORT_FILE
echo "Testing for basic SQL injection vulnerabilities..." | tee -a $REPORT_FILE

# Test basic SQL injection payloads on login
SQL_PAYLOADS=(
    "' OR '1'='1"
    "' UNION SELECT NULL--"
    "'; DROP TABLE users;--"
    "' OR 1=1#"
)

for payload in "${SQL_PAYLOADS[@]}"; do
    response=$(curl -s -X POST "$TARGET/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$payload\",\"password\":\"test\"}" \
        -w "%{http_code}" -o /dev/null)
    echo "SQL payload test '$payload': HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

echo "=== 7. XSS VULNERABILITY TESTING ===" | tee -a $REPORT_FILE
echo "Testing for Cross-Site Scripting vulnerabilities..." | tee -a $REPORT_FILE

XSS_PAYLOADS=(
    "<script>alert('XSS')</script>"
    "<img src=x onerror=alert('XSS')>"
    "javascript:alert('XSS')"
    "<svg onload=alert('XSS')>"
)

for payload in "${XSS_PAYLOADS[@]}"; do
    response=$(curl -s -X POST "$TARGET/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$payload\",\"password\":\"test\"}" \
        -w "%{http_code}" -o /dev/null)
    echo "XSS payload test '$payload': HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

echo "=== 8. DIRECTORY TRAVERSAL TESTING ===" | tee -a $REPORT_FILE
echo "Testing for directory traversal vulnerabilities..." | tee -a $REPORT_FILE

TRAVERSAL_PAYLOADS=(
    "../../../etc/passwd"
    "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts"
    "....//....//....//etc/passwd"
    "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
)

for payload in "${TRAVERSAL_PAYLOADS[@]}"; do
    response=$(curl -s "$TARGET/api/manual/$payload" -w "%{http_code}" -o /dev/null)
    echo "Directory traversal test '$payload': HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

echo "=== 9. RATE LIMITING TESTS ===" | tee -a $REPORT_FILE
echo "Testing rate limiting on authentication endpoint..." | tee -a $REPORT_FILE

echo "Sending 10 rapid requests to test rate limiting:" | tee -a $REPORT_FILE
for i in {1..10}; do
    response=$(curl -s -X POST "$TARGET/api/auth/login" \
        -H "Content-Type: application/json" \
        -d '{"email":"test@test.com","password":"test"}' \
        -w "%{http_code}" -o /dev/null)
    echo "Request $i: HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

echo "=== 10. API ENDPOINT ENUMERATION ===" | tee -a $REPORT_FILE
echo "Testing API endpoints..." | tee -a $REPORT_FILE

API_ENDPOINTS=(
    "/api/auth/user"
    "/api/data"
    "/api/users"
    "/api/admin"
    "/api/settings"
    "/api/backup"
    "/api/config"
    "/api/status"
    "/api/health"
    "/api/version"
)

for endpoint in "${API_ENDPOINTS[@]}"; do
    response=$(curl -s "$TARGET$endpoint" -w "%{http_code}" -o /dev/null)
    echo "$TARGET$endpoint - HTTP $response" | tee -a $REPORT_FILE
done
echo "" | tee -a $REPORT_FILE

echo "=== 11. SECURITY MISCONFIGURATIONS ===" | tee -a $REPORT_FILE
echo "Checking for security misconfigurations..." | tee -a $REPORT_FILE

# Check for debug modes, stack traces, etc.
DEBUG_PATTERNS=(
    "debug"
    "stack trace"
    "error"
    "exception"
    "warning"
    "database"
    "sql"
)

echo "Testing error page disclosure:" | tee -a $REPORT_FILE
ERROR_RESPONSE=$(curl -s "$TARGET/nonexistent-page-12345")
for pattern in "${DEBUG_PATTERNS[@]}"; do
    if echo "$ERROR_RESPONSE" | grep -qi "$pattern"; then
        echo "Found potential information disclosure: '$pattern'" | tee -a $REPORT_FILE
    fi
done
echo "" | tee -a $REPORT_FILE

echo "=== 12. CSRF PROTECTION TESTING ===" | tee -a $REPORT_FILE
echo "Testing CSRF protection..." | tee -a $REPORT_FILE

# Test if CSRF tokens are required
CSRF_RESPONSE=$(curl -s -X POST "$TARGET/api/auth/login" \
    -H "Content-Type: application/json" \
    -H "Origin: https://malicious-site.com" \
    -d '{"email":"test@test.com","password":"test"}' \
    -w "HTTP_CODE:%{http_code}")

echo "CSRF test with external origin: $CSRF_RESPONSE" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "=== 13. SUMMARY AND RECOMMENDATIONS ===" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE
echo "PENETRATION TEST COMPLETED" | tee -a $REPORT_FILE
echo "Report saved to: $REPORT_FILE" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "Key Security Recommendations:" | tee -a $REPORT_FILE
echo "1. Ensure all security headers are properly configured" | tee -a $REPORT_FILE
echo "2. Implement proper input validation and sanitization" | tee -a $REPORT_FILE
echo "3. Use parameterized queries to prevent SQL injection" | tee -a $REPORT_FILE
echo "4. Implement rate limiting on authentication endpoints" | tee -a $REPORT_FILE
echo "5. Ensure proper error handling without information disclosure" | tee -a $REPORT_FILE
echo "6. Implement CSRF protection for state-changing operations" | tee -a $REPORT_FILE
echo "7. Regular security updates and monitoring" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

echo "ðŸ”’ Penetration test completed. Report saved to $REPORT_FILE"